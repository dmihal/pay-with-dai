{"version":3,"sources":["QRSVG.js","App.js","serviceWorker.js","index.js"],"names":["cache","QRSVG","value","level","bgColor","fgColor","cellClassPrefix","otherProps","cells","cacheKey","qrcode","QRCodeImpl","ErrorCorrectLevel","addData","make","modules","getCells","cellSize","length","cellClassName","emptyCellClassName","filledCellClassName","cellIndex","map","row","rowIndex","cell","colIndex","className","classNameProp","fill","styleProp","style","height","key","width","x","y","App","useState","setValue","padding","background","margin","transform","transform-origin","d","color","textAlign","fontSize","placeholder","onChange","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0SAIMA,EAAQ,GA6DCC,EA9CS,SAAC,GAOlB,IAAD,IANFC,aAME,MANM,GAMN,MALFC,aAKE,MALM,IAKN,MAJFC,eAIE,MAJQ,UAIR,MAHFC,eAGE,MAHQ,UAGR,MAFFC,uBAEE,MAFgB,GAEhB,EADCC,EACD,uEACEC,EArBS,SAACN,EAAOC,GACvB,IAAMM,EAAQ,UAAMP,EAAN,YAAeC,GAC7B,IAAKH,EAAMS,GAAW,CAEpB,IAAMC,EAAS,IAAIC,KAAY,EAAGC,IAAkBT,IACpDO,EAAOG,QAAQX,GACfQ,EAAOI,OACPd,EAAMS,GAAYC,EAAOK,QAG3B,OAAOf,EAAMS,GAWCO,CAASd,EAAOC,GACxBc,EAAW,IAAMT,EAAMU,OAEvBC,EAAgBb,GAAe,UAAOA,EAAP,SAC/Bc,EACFd,GAAe,UAAOa,EAAP,YAAwBb,EAAxB,eACbe,EACFf,GAAe,UAAOa,EAAP,YAAwBb,EAAxB,gBAEfgB,EAAY,EAEhB,OACE,sBAAOf,EACJC,EAAMe,KAAI,SAACC,EAAKC,GAAN,OACTD,EAAID,KAAI,SAACG,EAAMC,GACb,IAAMC,EAAYF,EAAOL,EAAsBD,EACzCS,EAAgBD,EAAY,CAAEA,aAAc,KAG5CE,GAAQD,IAAkBH,EAAOrB,EAAUD,GAC3C2B,EAAYD,EAAO,CAAEE,MAAO,CAAEF,SAAW,KAC/C,OACE,wCACEG,OAAQhB,EACRiB,IAAKZ,KACDS,EACAF,EAJN,CAKEM,MAAOlB,EACPmB,EAAGT,EAAWV,EACdoB,EAAGZ,EAAWR,aC1BbqB,MA1Bf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNrC,EADM,KACCsC,EADD,KAGb,OACE,yBAAKZ,UAAU,OACb,4BAAQA,UAAU,cACf1B,EAAMgB,QAAU,IACf,yBAAKc,MAAO,CAAES,QAAS,OAAQC,WAAY,QAASC,OAAQ,SAC1D,yBAAKV,OAAO,MAAME,MAAM,OACtB,kBAAC,EAAD,CAAOjC,MAAOA,EAAOC,MAAM,MAE3B,uBAAGyC,UAAU,8BAA8BC,mBAAiB,SAC1D,0BAAMC,EAAE,uDAAuDF,UAAU,aAAaZ,MAAO,CAAEF,KAAM,WAAae,mBAAiB,UACnI,0BAAMC,EAAE,uDAAuDF,UAAU,iBAAiBZ,MAAO,CAAEF,KAAM,aACzG,0BAAMgB,EAAE,04DAA04Dd,MAAO,CAAEF,KAAM,eAGr6D,yBAAKE,MAAO,CAAEe,MAAO,QAASC,UAAW,SAAUC,SAAU,SAA7D,iBAGJ,2BAAO/C,MAAOA,EAAOgD,YAAY,mBAAmBC,SAAU,SAAAC,GAAC,OAAIZ,EAASY,EAAEC,OAAOnD,aCZzEoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b7d0f3d8.chunk.js","sourcesContent":["import React from 'react';\nimport QRCodeImpl from \"qr.js/lib/QRCode\";\nimport ErrorCorrectLevel from \"qr.js/lib/ErrorCorrectLevel\";\n\nconst cache = {};\n\nconst getCells = (value, level) => {\n  const cacheKey = `${value}:${level}`;\n  if (!cache[cacheKey]) {\n    // adapted from https://github.com/zpao/qrcode.react/blob/master/src/index.js\n    const qrcode = new QRCodeImpl(-1, ErrorCorrectLevel[level]);\n    qrcode.addData(value);\n    qrcode.make();\n    cache[cacheKey] = qrcode.modules;\n  }\n\n  return cache[cacheKey];\n}\n\nconst QRSVG: React.FC = ({\n    value = \"\",\n    level = \"L\",\n    bgColor = \"#FFFFFF\",\n    fgColor = \"#000000\",\n    cellClassPrefix = \"\",\n    ...otherProps\n}) => {\n  const cells = getCells(value, level);\n  const cellSize = 200 / cells.length;\n\n  const cellClassName = cellClassPrefix && `${cellClassPrefix}-cell`;\n  const emptyCellClassName =\n      cellClassPrefix && `${cellClassName} ${cellClassPrefix}-cell-empty`;\n  const filledCellClassName =\n      cellClassPrefix && `${cellClassName} ${cellClassPrefix}-cell-filled`;\n\n  let cellIndex = 0; // we use simple order as a key just to avoid the key warning here\n\n  return (\n    <g {...otherProps}>\n      {cells.map((row, rowIndex) =>\n        row.map((cell, colIndex) => {\n          const className = cell ? filledCellClassName : emptyCellClassName;\n          const classNameProp = className ? { className } : null;\n\n          // Only use the fill if no cellClassPrefix was set. See https://github.com/no23reason/react-qr-svg/issues/136 for reasoning.\n          const fill = !classNameProp && (cell ? fgColor : bgColor);\n          const styleProp = fill ? { style: { fill } } : null;\n          return (\n            <rect\n              height={cellSize}\n              key={cellIndex++} // string was too slow here\n              {...styleProp}\n              {...classNameProp}\n              width={cellSize}\n              x={colIndex * cellSize}\n              y={rowIndex * cellSize}\n            />\n          );\n        }),\n      )}\n    </g>\n  );\n}\n\nexport default QRSVG;\n\n// QRSVG.propTypes = {\n//     value: PropTypes.string.isRequired,\n//     size: PropTypes.number,\n//     level: PropTypes.oneOf([\"L\", \"M\", \"Q\", \"H\"]),\n//     bgColor: PropTypes.string,\n//     fgColor: PropTypes.string,\n//     cellClassPrefix: PropTypes.string,\n// };\n","import React, { useState } from 'react';\nimport './App.css';\nimport QRSVG from './QRSVG';\n\nfunction App() {\n  const [value, setValue] = useState('');\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {value.length >= 40 && (\n          <div style={{ padding: '10px', background: 'white', margin: '10px' }}>\n            <svg height=\"200\" width=\"200\">\n              <QRSVG value={value} level=\"L\" />\n\n              <g transform=\"translate(50,50) scale(0.5)\" transform-origin=\"50 50\">\n                <path d=\"M50,0A50,50,0,1,1,0,50,49.99963,49.99963,0,0,1,50,0Z\" transform=\"scale(1.1)\" style={{ fill: '#ececec' }} transform-origin=\"50 50\" />\n                <path d=\"M50,0A50,50,0,1,1,0,50,49.99963,49.99963,0,0,1,50,0Z\" transform=\"translate(0 0)\" style={{ fill: '#f5ac37'}} />\n                <path d=\"M51.84277,53.53029H70.842c.405,0,.59625,0,.62551-.531a36.31923,36.31923,0,0,0,0-5.81181c0-.37575-.18675-.531-.594-.531H33.06183c-.468,0-.594.15525-.594.594v5.56206c0,.71776,0,.71776.74926.71776ZM69.3457,40.15615a.60841.60841,0,0,0,0-.4365,12.35742,12.35742,0,0,0-1.12951-1.96877,15.94217,15.94217,0,0,0-2.313-2.907,7.667,7.667,0,0,0-1.43776-1.40627,22.46261,22.46261,0,0,0-9.37585-4.74979,23.306,23.306,0,0,0-5.3123-.56251H32.99658c-.468,0-.531.18675-.531.594V39.8119c0,.468,0,.594.594.594H69.12069s.31276-.063.37576-.24975H69.3457Zm0,19.87445a7.29155,7.29155,0,0,0-1.59752,0H33.09333c-.468,0-.6255,0-.6255.6255V71.50121c0,.49951,0,.62551.6255.62551H49.09324a7.99173,7.99173,0,0,0,2.27928-.15525,23.81833,23.81833,0,0,0,6.78381-1.50077,12.4166,12.4166,0,0,0,2.27928-1.062h.21825a20.30178,20.30178,0,0,0,8.71883-8.77734s.21826-.47251-.027-.59626ZM26.188,77.74952V60.46935c0-.40725,0-.468-.49951-.468H18.90694c-.37575,0-.531,0-.531-.4995V53.564h7.24957c.405,0,.56251,0,.56251-.531V47.15822c0-.37575,0-.468-.49951-.468H18.90694c-.37575,0-.531,0-.531-.49951V40.69166c0-.34426,0-.43651.4995-.43651H25.594c.468,0,.594,0,.594-.594V22.81748c0-.49951,0-.62551.6255-.62551H50.24976a35.70742,35.70742,0,0,1,5.06255.56251,30.54613,30.54613,0,0,1,9.78084,3.62478,27.56438,27.56438,0,0,1,5.49906,4.2503,30.11235,30.11235,0,0,1,3.34353,4.15579,25.06367,25.06367,0,0,1,2.44128,4.7813.81373.81373,0,0,0,.93375.657h5.59356c.71776,0,.71776,0,.74926.68851v5.12555c0,.49951-.18675.62551-.68851.62551H78.65179c-.43651,0-.56251,0-.531.5625a31.92156,31.92156,0,0,1,0,5.71731c0,.531,0,.594.59626.594h4.9343c.21825.28125,0,.5625,0,.846a6.31271,6.31271,0,0,1,0,1.09127V59.2566c0,.531-.15526.6885-.62551.6885H77.11952a.78188.78188,0,0,0-.90676.594,24.98877,24.98877,0,0,1-6.56332,9.5626,37.63817,37.63817,0,0,1-3.34353,2.68652c-1.251.72-2.46827,1.46927-3.75079,2.06328a33.78744,33.78744,0,0,1-7.37557,2.34227,38.451,38.451,0,0,1-7.31257.594H26.179v-.0315Z\" style={{ fill: '#fefefd' }} />\n              </g>\n            </svg>\n            <div style={{ color: 'black', textAlign: 'center', fontSize: '18px' }}>Pay with Dai</div>\n          </div>\n        )}\n        <input value={value} placeholder=\"Ethereum Address\" onChange={e => setValue(e.target.value)} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}